[{
    "title": "NGS-涉及到的生物信息学方法",
    "date": "",
    "description": "最近很想补缺补差。last update：2021-03-11",
    "body": "深度测序即第二代测序（NGS）。reads mapping涉及到：质量好坏；速度快慢；双序列比对问题（和经典双序列比对非常不同）\n  序列长度问题 在needleman-Wunsch和Smith-Waterman算法中，都基于假定：两条序列长度相差不大，但是reads mapping中，两者的长度会有跨数量级的差异：reads的长度不超过200bp，但是参考基因组却通常上百Mb\n  数据量问题 深度测序产生的reads达到几百Gb，相当于几十个人类基因组\n  数据质量问题 双序列比对中假定：序列本身没有错误，但是深度测序的reads质量不同，而且错误率较高。 因此需要混合全局比对和局部比对的混合型alignment，对于read是全局比对，对于参考基因组是局部比对，因此可以直接在比对隐马尔可夫模型中进行调整，比如：降低向短序列上的gap状态的转移概率，或者直接将相关状态直接挪掉，可以避免对短序列上过高的罚分，但是会影响最终序列的比对质量，而且计算量很大。\n  考虑除了少数多拷贝的基因，一个给定的reads通常只来自基因组的特定位置，即从绝大多数位置起始进行尝试都是无效的，而且浪费时间，因此借鉴BLAST的思路，采用seeding-and-extending的策略，即：先通过对基因组建立索引，将read快速定位，再通过标准的动态规划算法，构建最终的alignment。这个索引本质上是对数据的分组，基于对原始数据中的key应用索引函数处理，将原始数据划分成若干更小的组，通过将与key相关的检索限制在某个小组里来缩小搜索空间并进而降低搜索的时间。比如哈希（Hash）就是一种常见的索引方法。 抽屉原理 ；数据压缩算法中的 前缀树和后缀树\n  BWA涉及算法 BWT算法是BWA软件所使用的压缩算法，可以对数据进行无损压缩，对字符串轮转之后的字符矩阵进行排序和变换，使得数据可以进行无损压缩。\nhash函数  哈希函数，也称为散列函数或散列算法，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值的指纹，散列值通常用一个短的随机字母和数字组成的字符串来代表。好的散列函数在输入域中很少出现散列冲突。\n  ——维基百科\n 原始数据 --- 输入 --\u0026gt; 哈希函数 --- 输出 --\u0026gt; 数据指纹   定义 哈希函数是一种数据转换函数，将输入的数据映射成输出的索引，哈希表是一种数据结构，是根据关键码值（key-Value）直接进行访问记录的数据结构，它将数据对象映射到一个便于存储和检索的特定内存空间，加快了寻找的速度，编程中的哈希表是可逆的，常见的哈希函数有MD5、SHA等等。\n  哈希函数\n  对不同的输出值得到一个固定长度的消息摘要，理想的哈希函数应具有的特点：对不同的输入应该产生不同的结构；散列结果应当具有同一性（输出值尽量均匀？？？）和雪崩效应（微小的输入值变化使得输出值发生巨大的变化）。\n 冲突解决  这里的冲突值得是，现实中的哈希函数并不完美，当不同的输入值对应一个输出值时，会产生“碰撞”，需要解决冲突。常见的解决方法有：开放定址法，链地址法，建立公共溢出区，实际实现中，使用最多的是链地址法。\n 我的问题1:reads mapping中的哈希函数是什么？  抽屉原理  参考资料：  [学习笔记] 哈希函数和 SHA256 alibaba-interview 有空看一下这个（https://www.huaweicloud.com/articles/68ee6628394c5b8e1e03b2c6106a5ee6.html） 有空看一下这个-关于10年测序的综述（http://www.cib.ac.cn/xwdt/kjqy/201606/t20160606_4617425.html） 课程 https://www.coursera.org/learn/sheng-wu-xin-xi-xue/lecture/xgl06/xu-lie-hui-tie-he-bian-yi-jian-ding  ",
    "ref": "/blog/2021-3-14_ngs1_methods/"
  },{
    "title": "使用Latex写论文",
    "date": "",
    "description": "使用Latex写论文可以减少排版的时间，它对文献的引用以及排序非常友好。last update：2021-03-06",
    "body": "前言 最近写文章的时候，发现修改时调整参考文献的引用，是一件非常麻烦的事情，于是找到了一种简便的方法进行调整，发现了用Latex写论文原来这么好用（据涛哥和翔哥说，word也可以自动调整引用文献顺序，而我一直不知道\u0026hellip;）。\n主要内容  LaTex基本语法 模板的使用 文献的引用 排版的调整 特殊符号的引用 图片表格的插入  使用的工具  Oneleaf —— Online LaTeX Editor（推荐）  优点：不用本地搭建环境；在线编辑并渲染；部分投稿期刊直接提供链接模板。\n MacTeX—— For mac  mac的我还没有安过，仅列出来供参考。\n TexWorks —— For windows（我觉得很好用）。  除了上面列出来的，还有很多其他的，根据自己的喜好使用吧。\n基本语法  整体框架  注意到一个部分有开始也有结束，中间就是这个部分的内容。\n\\documentclass{article} \\begin{document} First document. This is a simple example, with no extra parameters or packages included. \\end{document}  preamble  在LaTex中，所有在document内容之前的都称为preamble,在preamble中可以定义整个文档的格式、使用的语言、你需要使用到的宏包、以及其他的元素。举例：\n\\documentclass[12pt, letterpaper]{article} %设置 \\usepackage[utf8]{inputenc} %加载了名叫inputenc的宏包，设置使用utf-8来编码。 在[]方括号中都是一些参数的选择，documentclass中设置了字体大小为12pt（默认的字体大小是10pt），纸张大小为信纸，其他的设置可以看Oneleaf的文档说明。\n这些内容也属于preamble：\n标题\n\\title{First document} 作者\n\\author{cat} 日期\n\\date{March 2021} 谢言\n\\thanks{funded by the Overleaf team}  document内容  字体的简单格式可以通过以下代码实现：\nSome of the \\textbf{greatest} %字体加粗 discoveries in \\underline{science} %加入下划线 were made by \\textbf{\\textit{accident}}. %斜体   还有更多的字体变换可以更改，具体参考字体格式，来个简单的应用示例感受一下它的实用性。\nOneleaf 示例 1. 模板的使用 进入 Oneleaf模板，选择合适的模板 这其中包括国科大的毕业论文模板、开题报告模板，以及各种杂志期刊、简历、信件、海报、报告、作业和写书的模板等等（部分期刊杂志会提供Oneleaf的模板）。\n 以论文写作为例 随便打开一个模板，最右边是实时的渲染结果，中间是可以编辑的部分，左边是模板的目录下文件。\n  左边的目录下存储了4个文件：\n 以.bib结尾的文件  通常用来存储引用文献的信息，其中引用文献需要用特定的格式——BibTex存储，可以通过谷歌学术、百度学术或者其它方式进行导出（谷歌学术的导出功能经常会崩溃），如何使用Bibtex格式进行文献引用请跳转 点击跳转。\n 以.bst结尾的文件  这个文件通常由期刊或杂志提供，设置了参考文献出现的文章结尾的方式，比如：设置排序方式，设置作者名称是缩写还是全称，标题的大小写等等，一般不需要自行维护，而且可以根据自己的需求来在.tex中重新调整。\n 以.tex结尾的文件  这个是进行文档内容编辑的文件，可以在这个文件中加载宏包，进行内容以及格式的更改。\n 以.cls结尾的文件  这个文件通常是类文件，通过文档最前面的\\documentclass导入，这里的\\documentclass[options]{class}是用来指定文档类型的，可以通过options参数来定制文档类的属性，不同的选项之间需要用逗号隔开，比如这里的\\documentclass[final,3p]{CSP}，其中final指的不在页面的边缘标记一个黑色框，这个3p对它的解释是：\n formats the article to the look and feel of the final format of model 3+ journals.\n 我没明白这个3+model是什么意思，但是通过调试，发现这个数字越大，页面距就越大。\n另外别的模板中还存在这些文件：\n .bbl文件  这是编译之后形成的文件，这里直接就显示了编译后的形式，可以直接下载PDF文件。\n .sty文件  这是包文件，通常使用\\usepackage导入。\n2. 内容的编辑以及参考文献的引用 内容的编辑 载入宏包的方法是在文档开始前\\begin{document}，写入\\usepackage{package}\n这里介绍几个常用的宏包：\n  数学公式 - amsmath\n  插图 - graphicx\n  颜色 - xcolor\n  表格 - array\n  中文 - ctex, xecjk\n  西文 otf 字体 - fontspec\n  英文下划线 - geometry\n  特别的，当要使用英文下划线-时，比如写入sigminer包中的函数名read_maf时，并不能直接识别下划线，需要载入该包来处理，或者给每处下划线改成\\_也可以不用载入包来识别。\n 超链接 - hyperref  语法：\\usepackage[options]{hyperref}\n示例：加入超链接，同时将文献也超链接到reference中，并且设置超链接的颜色，常用的设为蓝色或者黑色。\n\\usepackage[backref, colorlinks,linkcolor=blue]{hyperref}   \n文献的引用  保存引用文献信息(google)  如下图所示，谷歌学术中可以直接得到BibTex这种引用格式，将文献信息存储在.txt中，然后更改后缀为.bib即可。\n  点击 BibTex 后会弹出下图所示页面，复制内容至.bib文件内即可。\n   在tex文件中对引用格式进行设置  在文档结束位置\\end{document}前，增加对参考文献格式以及引用的设置，比如：\n\\bibliographystyle{bibft}\\it \\bibliography{bibfile} bibft是模板自带并自己命名的格式文件，这是由.cls文件定义的，bibfile就是制作好的bibtex文件，\n注意这里的文献引用格式有很多种，除了模板中定义的格式，可以通过参数的调整将格式更改为自己想要的，比如常用的，在方括号中标注数字，并且根据文献引用的先后顺序对reference排序：\n\\begin{document} \\bibliographystyle{unsrt} \\bibliographystyle{unsrt} %根据引用顺序自动排序 \\bibliography{bibfile.bib} %引用文献的文件 \\end{document} 我认为最方便的地方就是这里，能够根据文献引用的顺序对reference进行自动排序。\n 保存引用文献信息(zotero)  在zotero中设置导出为BibTex，在zotero中通过command+shift+c就可以直接复制出该文献的BibTex引用格式。\n   在tex文件中进行引用  通常在正文中有很常见的几种文献引用格式： 温哥华格式（上标形式） 哈佛格式（直接显示作者和发表年份） IEEE 格式（方括号内标注引用顺序）\n在文中一般使用\\cite{}进行引用，括号中的内容就是BibTex中的第一个参数，这个是可以自定义的，通常都是作者的姓或者名+发表年份+论文题目的首个单词。\n@inproceedings{song2013hierarchical, title={Hierarchical representation using NMF}, author={Song, Hyun Ah and Lee, Soo-Young}, booktitle={International conference on neural information processing}, pages={466--473}, year={2013}, organization={Springer} } 另外还有宏包natbib，通过不同形式的cite比如：\n\\citet：\n\\citet{jon90} ## Jones et al. (1990) \\citep：\n\\citep{jon90}\t## (Jones et al., 1990) \\citeyear：\n\\citeyearpar{jon90} ## (1990) \u0026hellip;\u0026hellip;\n该宏包的使用方式如下。\n\\usepackage[option]{natbib} \\bibliographystyle{natbib} \\bibliography{bibfile} 3. 表格的制作 分为以下两个部分：\n 手动输入表格（适合小型表格） 其他工具进行表格转换   Excel中的表格  可以在Excel中使用插件：Excel2Latex，该插件能够将Excel表格转化为LaTex的表格形式。\nWord中的表格  可以使用pandoc直接转换为.tex格式，不过转换之后不是完美的，可能需要手动调整一下。\n示例：\npandoc test.docx -o test.tex 其他文件形式的表格  比如在R当中得到的表格，可以使用stargazer包把结果输出为LaTex格式，或者xtable包。\n以xtable包为例：\n\u0026gt; install.packages(\u0026#34;xtable\u0026#34;) #安装xtable \u0026gt; library(xtable) #载入 \u0026gt; data(iris) # 示例数据 \u0026gt; xtable(head(iris),digits=3,caption=\u0026#34;Head of Iris Data\u0026#34;) #将iris数据前6行 # 保留三位小数 #标题设为\u0026#34;Head of Iris Data\u0026#34;，导出为LaTex格式 % latex table generated in R 4.0.2 by xtable 1.8-4 package % Sat Mar 6 20:04:47 2021 \\begin{table}[ht] \\centering \\begin{tabular}{rrrrrl} \\hline \u0026amp; Sepal.Length \u0026amp; Sepal.Width \u0026amp; Petal.Length \u0026amp; Petal.Width \u0026amp; Species \\\\ \\hline 1 \u0026amp; 5.100 \u0026amp; 3.500 \u0026amp; 1.400 \u0026amp; 0.200 \u0026amp; setosa \\\\ 2 \u0026amp; 4.900 \u0026amp; 3.000 \u0026amp; 1.400 \u0026amp; 0.200 \u0026amp; setosa \\\\ 3 \u0026amp; 4.700 \u0026amp; 3.200 \u0026amp; 1.300 \u0026amp; 0.200 \u0026amp; setosa \\\\ 4 \u0026amp; 4.600 \u0026amp; 3.100 \u0026amp; 1.500 \u0026amp; 0.200 \u0026amp; setosa \\\\ 5 \u0026amp; 5.000 \u0026amp; 3.600 \u0026amp; 1.400 \u0026amp; 0.200 \u0026amp; setosa \\\\ 6 \u0026amp; 5.400 \u0026amp; 3.900 \u0026amp; 1.700 \u0026amp; 0.400 \u0026amp; setosa \\\\ \\hline \\end{tabular} \\caption{Head of Iris Data} \\end{table} 表格的介绍 表格的基本格式和要素如下（2行2列表格）：\n\\documentclass{article} \\usepackage{float}%提供float浮动环境 \\usepackage{makecell} %%用来基线 \\begin{table}[h] \\centering %%表居中 \\caption{table} %%表格标题 \\begin{tabular}{|c|c|} %%{cc} 表示各列元素对齐方式，left-l,right-r,center-c，两个c表示两列，｜表示增加垂直方向基线 \\hline %%\\hline 在此行下面画一横线 a \u0026amp; b \\\\\\hline c \u0026amp; d\\\\ \\hline \\end{tabular} \\end{table} \\end{document}   当表格太大或者太小的时候，有非常多的解决办法，可以通过调整字体的长或宽，也可以直接整体调整表格的大小，本质都是通过在tabular类外，套上调整表格的参数设置。\n通过调整字体的宽度（mm是百分比，60mm就是60%）：\n\\resizebox{\\textwidth}{60mm}{} 通过调整表格的大小：\n\\usepackage{graphicx} \\begin{table} \\caption{表格标题} \\scalebox{0.9}{ %缩小至原来的90% \\begin{tabular} …… \\end{tabular}} \\end{table} 文献中常用的三线表可以通过以下Latex实现：\n\\documentclass{article} \\usepackage{float}%提供float浮动环境 \\usepackage{booktabs} %%提供命令\\toprule、\\midrule、\\bottomrule \\usepackage{makecell} %%用来基线 \\usepackage{geometry} \\usepackage{amsmath} %\\geometry{papersize={40cm,80cm}} \\geometry{left=1cm,right=1cm,top=3cm,bottom=1cm} \\begin{document} %经典三线表 \\begin{table}[H] %%H为当前位置 \\caption{\\textbf{test title}}%标题 \\centering%把表居中 \\begin{tabular}{ccc}%四个c代表该表一共四列，内容全部居中 \\toprule[1.5pt]%第一道横线 year \u0026amp; month \u0026amp; day \\\\ \\midrule%第二道横线 2021 \u0026amp; 3 \u0026amp; 5 \\\\ \\bottomrule[1.5pt]%第三道横线 \\end{tabular} \\end{table} \\end{document}   4. 图片的引入 LaTeX插入图片时，支持格式有各种：png, pdf, jpg, eps等等。\n 准备图片  将图片全部保存在目录下的同一个文件夹下，方便查找，注意图片的命名尽量避免中文，特殊字符等等(这里就只用了一个文件，我就直接放在目录下了)。\n 图片基本语法  必须加载graphicx等包来支持图片的导入。\n\\documentclass{article} \\usepackage{graphicx} \\graphicspath{ {images/} } \\begin{document} The universe is immense and it seems to be homogeneous, in a large scale, everywhere we look at. \\includegraphics{universe} There's a picture of a galaxy above \\end{document}  给图片进行排版（排版有很多种，现在展示的是两个图片并排）    \\usepackage{graphicx} %%插入图片的宏包 \\usepackage{float} %%设置图片浮动位置的宏包 \\usepackage{subfigure} %%插入多图时用子图显示的宏包 \\begin{figure} %%旋转子系统姿态角 \\centering \\subfigure{ \\label{fig:subfig:a} %% label for first subfigure \\includegraphics[width=4cm,height=4cm]{taoziyu.jpg}} \\hspace{1in} \\subfigure{ \\label{fig:subfig:b} % label for second subfigure \\includegraphics[width=4cm,height=4cm]{taoziyu.jpg}} \\caption{The same cute cat (a) cute cat1. (b) cute cat2.} %% caption用于图表的标题 \\label{fig:attitude} %% label for entire figure \\end{figure} 参考资料  Oneleaf官方文档 BibTex的使用方法 latex documentclass 及相关布局 document class LaTex - 从出门到掉到坑 LaTex插入图形，表格 LaTeX排版札记 用R语言快速生成Latex表格 LaTeX高效写作系列：word表格转LaTeX  题外之言 该markdown文档中新使用了以下几个有趣的功能：\n 自定义锚实现页内跳转  在跳转目的地附近加上\u0026lt;span id=\u0026quot;jump\u0026quot;\u0026gt;目的地\u0026lt;/span\u0026gt;，在需要点击跳转的地方加上[点击跳转](#jump)\n 更改超链接颜色，更改字体颜色 多图片并列 ",
    "ref": "/blog/2021-3-05-latex_blog/"
  },{
    "title": "等待天使的妹妹",
    "date": "",
    "description": "2020年疫情期间漫长的寒假，这本书是那个时候在家读的。",
    "body": "前言",
    "ref": "/book/2021-1-16/"
  },{
    "title": "Hugo+Github+阿里云域名搭建个人博客",
    "date": "",
    "description": "这是我第一次搭建个人博客，记录一下搭建过程。last update：2021-01-21",
    "body": "前言 最近师兄和涛哥都分享了这个流程：如何使用了R包blogdown搭建个人博客，但是我和轩哥在使用的过程中发现一个小问题，有一些主题似乎并不能很好的被blogdown安装的hugo来应用，几番求解无果，暂时将这个问题搁置，因为太喜欢这个theme不想放弃，所以找了一种不用blogdown的方法去搭建，终于取得成果。\n搭建流程  下载Hugo  Mac直接使用brew安装即可\n其他的系统可以直接参考官方文档：hugo官方文档\nbrew install hugo 部分主题依赖extended version（比如我使用的这个主题），所以检查一下Hugo版本\nhugo version Hugo Static Site Generator v0.80.0/extended darwin/amd64 BuildDate: unknown  使用Hugo建博客  #新的博客的名字就叫blog hugo new site blog ls archetypes\tcontent\tlayouts\tresources\tthemes config.toml\tdata\tstatic  设置博客主题  从Hugo的官网找到自己喜欢的主题：Hugo themes\n我使用了这个主题：hugo-future-imperfect-slim\n下面开始设置博客主题\ncd blog/themes #blog就是刚才新创建的博客目录，themes是它的子目录 git clone https://github.com/pacollins/hugo-future-imperfect-slim.git #点击主题页的download，进入GitHub主页，找到code⬇当中的网址进行clone #注意主题要下在theme目录下 cp themes/hugo-future-imperfect-slim/exampleSite/config.toml . #使用模板自带的配置文件替换blog目录下的配置文件 有的模板没有exampleSite目录，或者是config.toml文件名为其他的名字，不管怎样，用模板目录下的config文件替换blog目录下的config文件即可。\n像轩哥用的主题 hyde，根据其在github上的安装提示，对blog目录下的config文件首行增加theme = \u0026quot;hyde\u0026quot; 即可，无需拷贝模板的config文件。\n以及主题 npq-hugo，它的模板config文件不在exampleSite目录下，而是themes/npq-hugo/example-config.toml。\n 回到blog目录下创建新博文  cd .. hugo new posts/test.md #会在content/post文件夹下创建test.md的文件，可以直接对其进行修改 开始可能不会修改，可以根据主题目录中的范例进行模仿，我选择主题的范例文件储存在：\nblog/themes/hugo-future-imperfect-slim/exampleSite/content/blog\n 进行预览  hugo server -D Start building sites … | EN | FR | PL | PT | DE | ES | ZH-CN | ZH-TW | JA | NL -------------------+----+----+----+----+----+----+-------+-------+----+----- Pages | 11 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 Paginator pages | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Non-page files | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Static files | 27 | 27 | 27 | 27 | 27 | 27 | 27 | 27 | 27 | 27 Processed images | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Aliases | 3 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 Sitemaps | 2 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 Cleaned | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Built in 108 ms Watching for changes in /Volumes/home /github/taozy_blog/{archetypes,content,data,layouts,static,themes} Watching for config changes in /Volumes/home /github/taozy_blog/config.toml Environment: \u0026quot;development\u0026quot; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 在浏览器中打开terminal中显示的网址进行预览： http://localhost:1313/\n你可以使用可以编辑md的工具进行内容修改，我习惯用Rstudio打开它进行更改，而且很棒的是，在编辑的过程中，预览网址上的内容也会实时的变更，很方便进行修改。\n 配置Github repository  我配置了两个repos，一个用于托管我blog目录下所有的文件，一个用来托管public文件夹用于博客的显示。\n 第一个repos随意命名  上传blog目录下的文件\n第二个repos必须命名为：your_git_name.github.io，才能够被当作个人的主页  上传public目录下的文件（注意不是public这个文件夹，而是该文件夹下的所有文件），目前还没有生成public文件，不要着急，继续下面的操作。\n在blog目录下执行下面的命令，把theme改成你自己的theme名称，baseUrl换成你自己的github名，执行完会在blog目录下生成一个public目录，将这个目录下的内容上传到your_git_name.github.io仓库中\nhugo --theme=hugo-future-imperfect-slim --baseUrl=\u0026#34;https://taoziyu97.github.io\u0026#34; Start building sites … | EN | FR | PL | PT | DE | ES | ZH-CN | ZH-TW | JA | NL -------------------+----+----+----+----+----+----+-------+-------+----+----- Pages | 11 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 Paginator pages | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Non-page files | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Static files | 21 | 21 | 21 | 21 | 21 | 21 | 21 | 21 | 21 | 21 Processed images | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Aliases | 3 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 Sitemaps | 2 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 Cleaned | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Total in 209 ms  设置仓库的GitHub Pages  在仓库主页找到Setting，在Options中对Github Pages进行设置，如果你没有购买域名，那么你就可以在这步直接使用github提供的网址，作为你的博客网页，如果你有自己的域名（比如我从阿里云买了.cn的域名，我就将Custom domain设置为自己的域名）\n 解析域名  打开域名解析，进行解析设置，添加两条记录，主机记录分别为@和www，记录类型为CNAME，记录值都指向github的网址，your_git_name.github.io\n现在打开个人主页试一试效果吧！\n",
    "ref": "/blog/2021-1-11-build_blog/"
  },{
    "title": "About",
    "date": "",
    "description": "Hugo, the world’s fastest framework for building websites",
    "body": "test page\n",
    "ref": "/about/"
  },{
    "title": "Contact",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
