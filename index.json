[{
    "title": "博客优化计划",
    "date": "",
    "description": "仍然有很多需要做的，更上一层楼 last update：2021-06-08",
    "body": "引言 分为功能改进、美观改进。\n博客功能改进   个人博客归档（已完成）\n  date的时间更换成自动化填充，每次手动填写很麻烦\n  搜索中文优化，目前速度较慢\n  更改归档页面时间0001\n  每篇博文的分享页面超链接到对应网址\n      删除不需要的语言支持，只保留英文和中文\n  增加评论功能\n      分类更加细化，最好能有层层分类\n  ABOUT页面填充自己的个人信息\n  翻页添加页码\n  博客整体美观   每个博文的图片选取大小合适的\n  标题的英文或中文的字距过大，比如下图的 引言 和 博客功能改进\n    ",
    "ref": "/blog/2021-6-7_optimization_of_the_blog/"
  },{
    "title": "hugo博客配置归档页面",
    "date": "",
    "description": "hugo没有自带的归档设置，需要手动添加 last update：2021-06-07",
    "body": "引言 hugo没有自带的归档设置，需要手动添加。\n操作步骤   在taozy_blog/layouts/_default/目录下创建 archives.html 文件\n  将taozy_blog/layouts/_default/目录下的 single.html 内容复制进 archives.html 文件（single.html的格式就是每篇博文的格式，也可以采用主题的contact.html的格式或者about.html的格式）\n  找到archives.html 文件中的{{ .Content }} 替换为下面的内容:\n  {{ range (.Site.RegularPages.GroupByDate \u0026#34;2006\u0026#34;) }} \u0026lt;h3\u0026gt;{{ .Key }}\u0026lt;/h3\u0026gt; \u0026lt;ul class=\u0026#34;archive-list\u0026#34;\u0026gt; {{ range (where .Pages \u0026#34;Type\u0026#34; \u0026#34;blog\u0026#34;) }} \u0026lt;li\u0026gt; {{ .PublishDate.Format \u0026#34;2006-01-02\u0026#34; }} -\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} 对上述代码进行解读:\n 归档目录  Pages \u0026ldquo;Type\u0026rdquo; \u0026ldquo;blog\u0026quot;即归档目录设置为content/blog/下的内容，如果去掉blog，引号内留空，就会自动归档根目录下的文件，也就是content目录的文件。\n 可选归档时间  .Site.RegularPages.GroupByDate \u0026ldquo;2006\u0026rdquo;：按年归档 .Site.RegularPages.GroupByDate \u0026ldquo;2006-01\u0026rdquo;：按年月归档\n在config.toml文件[menu]中仿照其他添加以下代码，使得主页上栏显示该分类：  [[menu.main]] name = \u0026#34;Archives\u0026#34; identifier = \u0026#34;archives\u0026#34; url = \u0026#34;/archives/\u0026#34; pre = \u0026#34;\u0026lt;i class=\u0026#39;fa fa-newspaper\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; weight = 6 如下：\n完成归档页面的建立。\n参考：   配置主要参考：为hugo添加归档页面\n  我为什么要从 Hexo 更换到 Hugo\n  解读部分主要参考：Hugo添加归档页面\n  ",
    "ref": "/blog/2021-6-7_%E9%85%8D%E7%BD%AE%E5%BD%92%E6%A1%A3/"
  },{
    "title": "ERROR: Could not find a version that satisfies the requirement torch==1.5.1 ",
    "date": "",
    "description": "ERROR: No matching distribution found for torch==1.5.1 last update：2021-06-04",
    "body": "引言 为了在集群上跑1000个模拟样本的SigprofilerExtractor工具，在集群上自己新建的环境里安装，解决安装bug，并成功使用。\n解决bug思路   发现依赖torch1.5.1版本\n  通过pip install安装失败\n  使用whl安装发现没有对应python3.9的版本\n  根据版本推测1.5.1不能在python3.9安装\n  重建新环境，安装python3.8，进而安装1.5.1\n  成功\n  具体实施 使用sigprofilerextractor发现报错如下：\nERROR: Could not find a version that satisfies the requirement torch==1.5.1 (from sigprofilerextractor) (from versions: 0.1.2, 0.1.2.post1, 0.1.2.post2, 1.7.1, 1.8.0, 1.8.1) ERROR: No matching distribution found for torch==1.5.1 需要安装torch1.5.1版本，直接conda安装和pip安装都失败了 另外提示中表明可以通过source使用whl安装，网址如下：\nCannot install torch just with pip, try again with source from https://download.pytorch.org/whl/torch_stable.html Looking in links: https://download.pytorch.org/whl/torch_stable.html 选择匹配版本，发现报错，其中网址中36指的是python3.6版本\nERROR: Could not install requirement torch==1.5.1+cpu from https://download.pytorch.org/whl/cpu/torch-1.5.1%2Bcpu-cp39-cp39-linux_x86_64.whl because of HTTP error 403 Client Error: Forbidden for url: https://download.pytorch.org/whl/cpu/torch-1.5.1%2Bcpu-cp39-cp39-linux_x86_64.whl for URL https://download.pytorch.org/whl/cpu/torch-1.5.1%2Bcpu-cp39-cp39-linux_x86_64.whl torch1.5.1没有支持3.9的版本，但是我的python是3.9的\n(R4) [taozy@hpc-login-gpu01 ~]$ python Python 3.9.1 | packaged by conda-forge | (default, Dec 21 2020, 22:08:58) [GCC 9.3.0] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. 创建一个新环境去跑sigprofilerextractor：sigminer环境，这个python是3.8的 先在这个环境里安装sigminer，使用conda安的时候老是出现以下报错\nSolving environment: failed with initial frozen solve. Retrying with flexible solve. Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source. 有可能是镜像的问题，换源 还没换源莫名其妙好了\nCollecting package metadata (repodata.json): done Solving environment: done proceed yes之后继续下载 载入sigminer时有问题\n\u0026gt; library(sigminer) Error: package or namespace load failed for ‘sigminer’ in dyn.load(file, DLLpath = DLLpath, ...): unable to load shared object \u0026#39;/slst/home/taozy/miniconda3/envs/sigminer/lib/R/library/data.table/libs/datatable.so\u0026#39;: /slst/home/taozy/miniconda3/envs/sigminer/lib/R/library/data.table/libs/datatable.so: symbol GOMP_loop_nonmonotonic_dynamic_next, version GOMP_4.5 not defined in file libgomp.so.1 with link time reference In addition: Warning message: package ‘sigminer’ was built under R version 4.0.5 \u0026gt; install.packages(\u0026#34;data.table\u0026#34;) 是库的问题，重新安装data.table，解决 在python3.8下安装发现问题解决，torch1.5.1成功安装 运行时发现自动调用python3.9，通过py_path强制设定3.8版本\nsigprofiler_extract(simulate.tally_X, output = \u0026#34;PCAWG_1000\u0026#34;, range = 2:30, nrun = 100, init_method = \u0026#34;random\u0026#34;, is_exome = FALSE, use_conda = FALSE, py_path = \u0026#34;~/miniconda3/envs/sigminer/bin/python\u0026#34; ) 运行报错python3.8没有sigprofilerExtractor\npython: /slst/home/taozy/miniconda3/envs/sigminer/bin/python libpython: /public/slst/home/taozy/miniconda3/envs/sigminer/lib/libpython3.8.so pythonhome: /slst/home/taozy/miniconda3/envs/sigminer:/slst/home/taozy/miniconda3/envs/sigminer version: 3.8.2 | packaged by conda-forge | (default, Mar 5 2020, 17:11:00) [GCC 7.3.0] numpy: /slst/home/taozy/miniconda3/envs/sigminer/lib/python3.8/site-packages/numpy numpy_version: 1.20.3 NOTE: Python version was forced by use_python function Python module SigProfilerExtractor not found, try installing it... WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by \u0026#39;NewConnectionError(\u0026#39;\u0026lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x2b8645858070\u0026gt;: Failed to establish a new connection: [Errno -2] Name or service not known\u0026#39;)\u0026#39;: /simple/sigprofilerextractor/ WARNING: Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by \u0026#39;NewConnectionError(\u0026#39;\u0026lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x2b8645858c40\u0026gt;: Failed to establish a new connection: [Errno -2] Name or service not known\u0026#39;)\u0026#39;: /simple/sigprofilerextractor/ WARNING: Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by \u0026#39;NewConnectionError(\u0026#39;\u0026lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x2b86458584f0\u0026gt;: Failed to establish a new connection: [Errno -2] Name or service not known\u0026#39;)\u0026#39;: /simple/sigprofilerextractor/ WARNING: Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by \u0026#39;NewConnectionError(\u0026#39;\u0026lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x2b8645858ac0\u0026gt;: Failed to establish a new connection: [Errno -2] Name or service not known\u0026#39;)\u0026#39;: /simple/sigprofilerextractor/ WARNING: Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by \u0026#39;NewConnectionError(\u0026#39;\u0026lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x2b864586a550\u0026gt;: Failed to establish a new connection: [Errno -2] Name or service not known\u0026#39;)\u0026#39;: /simple/sigprofilerextractor/ ERROR: Could not find a version that satisfies the requirement SigProfilerExtractor==1.1.0 (from versions: none) ERROR: No matching distribution found for SigProfilerExtractor==1.1.0 Error: Error installing package(s): \u0026#39;SigProfilerExtractor==1.1.0\u0026#39; Execution halted 指定该版本的工具进行安装\npip install SigProfilerExtractor==1.1.0 安装成功\nInstalling collected packages: joblib, threadpoolctl, scipy, scikit-learn, pillow, pyparsing, six, cycler, kiwisolver, python-dateutil, matplotlib, nimfa, pytz, pandas, seaborn, sigProfilerPlotting, patsy, statsmodels, SigProfilerMatrixGenerator, reportlab, psutil, PyPDF2, xlrd, SigProfilerExtractor Successfully installed PyPDF2-1.26.0 SigProfilerExtractor-1.1.0 SigProfilerMatrixGenerator-1.1.30 cycler-0.10.0 joblib-1.0.1 kiwisolver-1.3.1 matplotlib-3.4.2 nimfa-1.4.0 pandas-1.2.4 patsy-0.5.1 pillow-8.2.0 psutil-5.8.0 pyparsing-2.4.7 python-dateutil-2.8.1 pytz-2021.1 reportlab-3.5.67 scikit-learn-0.24.2 scipy-1.6.3 seaborn-0.11.1 sigProfilerPlotting-1.1.15 six-1.16.0 statsmodels-0.12.2 threadpoolctl-2.1.0 xlrd-1.2.0 终于跑上了\n/opt/gridview//pbs/dispatcher/mom_priv/jobs/2439514.node1.SC: line 16: out_dir: command not found sigminer version 2.0.1 - Star me at https://github.com/ShixiangWang/sigminer - Run hello() to see usage and citation. Warning message: package ‘sigminer’ was built under R version 4.0.5 Loading required namespace: reticulate Python environment configuration. ==================== python: /slst/home/taozy/miniconda3/envs/sigminer/bin/python libpython: /public/slst/home/taozy/miniconda3/envs/sigminer/lib/libpython3.8.so pythonhome: /slst/home/taozy/miniconda3/envs/sigminer:/slst/home/taozy/miniconda3/envs/sigminer version: 3.8.2 | packaged by conda-forge | (default, Mar 5 2020, 17:11:00) [GCC 7.3.0] numpy: /slst/home/taozy/miniconda3/envs/sigminer/lib/python3.8/site-packages/numpy numpy_version: 1.20.3 NOTE: Python version was forced by use_python function ************** Reported Current Memory Use: 0.41 GB ***************** Extracting signature 2 for mutation type 176 The matrix normalizig cutoff is 17600 参考：  how can i install torch  ",
    "ref": "/blog/2021-6-4_torch1.5.1_error/"
  },{
    "title": "Excel数字长度超13位尾号变0",
    "date": "",
    "description": "Excel number format last update：2021-05-27",
    "body": "引言 小雨毕业填各种表格，发现数字很长的时候会直接用0替代超长位数的数字，检索之后，给她解决了这个小问题。\n操作方法 设置数字格式，在自定义中输入@\n 重新输入可以发现已经可以了\n  参考资料：  Excel数字长度超13位尾号变0或E+，教你这招只用一个0就能搞定  ",
    "ref": "/blog/2021-5-27_excel_number/"
  },{
    "title": "线程和进程",
    "date": "",
    "description": "Threads and Processes  last update：2021-05-26",
    "body": "引言 看了一下廖雪峰的官方网站中对多线程和多进程的讲解，写的真是又简洁又明了，结合今天workshop中zk提到的并行计算，简单汇总写个学习笔记。\n操作系统可以同时执行多任务，比如同时运行浏览器、QQ和word，CPU执行代码是按照顺序一条条的执行。\n操作系统执行多任务是让CPU对多个任务轮流进行交替执行，比如让浏览器执行0.1秒，让word执行0.1秒。\n不管是单核还是多核的CPU，都可以同时运行多个任务，单核CPU执行任务交替进行，多核CPU在任务数量多于CPU的核数时，也是交替执行任务。\n一、进程 计算机中一个任务为一个进程，浏览器时一个进程，word也是一个进程。部分进程内部需要同时执行多个子任务，比如使用word一边打字一边检查拼写，一边后台打印，子任务就是线程。\n操作系统调度的最小任务单位是线程。由于一个应用程序可以有，多个进程，也可以有多个线程，实现任务的方法包括：\n多进程模式（每个进程只有一个线程）：\n  多线程模式（一个进程有多个线程）：\n  多进程＋多线程模式（复杂度最高）：\n  二、线程 线程包含在进程内，多任务既可以多进程来实现，也可以单进程内的多线程实现，也可以混合多进程和多线程。\n和多线程相比，多进程的缺点在于：\n 创建进程比创建线程开销大，尤其是在Windows系统上； 进程间通信比线程间通信要慢，因为线程间通信就是读写同一个变量，速度很快。  多进程的优点在于：\n多进程稳定性比多线程高，因为在多进程的情况下，一个进程崩溃不会影响其他进程，而在多线程的情况下，任何一个线程崩溃会直接导致整个进程崩溃。\n多线程编程的特点在于：\n 经常需要读写共享数据，并且需要同步，比如播放电影时一个线程播视频，一个线程播音频，两个线程需要协调运行保持音画同步，因此多线程编程的复杂度高，调试更困难。  三、串行，并发与并行   串行 多个任务，执行时一个执行完再执行另一个。\n  并发 多个线程在单个核心运行，同一时间一个线程运行，系统不停切换线程，看起来像同时运行，实际上是线程不停切换。\n  并行 每个线程分配给独立的核心，线程同时运行。\n  四、CPU与核心  物理核  物理核数量=cpu数(机子上装的cpu的数量)*每个cpu的核心数\n 虚拟核  所谓的4核8线程，4核指的是物理核心。通过超线程技术，用一个物理核模拟两个虚拟核，每个核两个线程，总数为8线程。在操作系统看来是8个核，但是实际上是4个物理核。 通过超线程技术可以实现单个物理核实现线程级别的并行计算，但是比不上性能两个物理核。\n 单核cpu和多核cpu  都是一个cpu，不同的是每个cpu上的核心数，多核cpu是多个单核cpu的替代方案，多核cpu减小了体积，同时也减少了功耗，一个核心只能同时执行一个线程。\n参考资料：   廖雪峰的官方网站-多线程\n  认识cpu、核与线程\n  ",
    "ref": "/blog/2021-5-24_threads_and_processes/"
  },{
    "title": "逻辑回归",
    "date": "",
    "description": "logistic regression  last update：2021-04-12",
    "body": "引言  线性回归  假设数据包含 尺寸 和 重量 两组，根据这两组数据用 最小二乘法 拟合一条线后，我们可以做如下的事情：\n  计算r平方来确定两个变量是否相关\n  计算p值确定R平方是否具有统计显著性\n  用于预测，如果一个新鼠标有某重量，可以根据这个线来预测其大小\n  多元回归  假设用 体重 和 血容量 来预测大小，拟合曲线可做上述三个同样的事情，还可以用离散型数值来预测大小。\n比较模型  进行正态回归，使用权重来预测大小。\n逻辑回归 S型函数定义：\n  S 型函数会产生以下曲线图：\n y' 是逻辑回归模型针对特定样本的输出。 z 是 b + w1x1 + w2x2 + … wNxN w 的值是该模型学习的权重，b 是偏差。 x 的值是特定样本的特征值。  线性回归的损失函数是平方损失。逻辑回归的损失函数是对数损失函数。\n  逻辑回归预测事物是对还是错，而不是连续的事物，通常用于分类，根据该目的拟合了“S”形曲线，可以给出概率。\n假设这里用体重来预测肥胖，或者基因型和体重来预测肥胖，即不仅可以处理体重和年龄等连续数值，还可以处理离散数值，可以测试每个变量是否对预测肥胖有用。\n 最大似然法拟合曲线  本质就是不停的计算，选择具有最大似然的曲线。\n最大似然 最大似然的目标是找到使分布适合数据的最佳方法。不同类型的数据存在不同类型的分布，让分布适合数据可以让数据的使用更轻松，更通用，使它适用于相同类型的每个实验，假设称重了一批老鼠如下：\n在这种情况下，认为老鼠体重可能呈正态分布，正态分布意味着：\n  老鼠的重量 接近均值 或平均值。\n  期望测量值围绕平均值相对对称。（虽然看起来不是完全对称，但是也没有非常明显的偏向）\n  正态分布存在多种大小和形状，如下：\n当确定形状之后，要找出居中的位置。\n假设选任何一个旧的正态分布，下图分布表示测量的大多数值应该接近平均值，看看它对数据的拟合程度（黑色虚线处是分布平均值）：\n发现测量的大多数值和分布的均值相差很大（右边多数的测量值的似然很低），如果将正态分布移到其均值和平均体重相同的位置：\n发现红色圈出部分的似然相对高，继续移动正态分布，这些测量值的似然再次下降：\n可以在分布中心的位置，绘制观察到数据的似然，从左侧开始，计算观察数据的似然，将分布向右移动并重新计算似然：\n当尝试了所有可能的位置，就可以将正态分布置于需要的位置，即最大化观察我们所测量值的似然的位置，以上都是平均值的最大似然估计，这里讨论的是分布的均值，不是数据的均值吗，接下来找出标准差的最大似然估计：\n日常对话中，概率和似然（likelihood）可能指的是同一个概念，但是在统计学中，似然（likelihood）指的是：尝试针对给定的一组观察到的测量值，找到分布的最佳均值或标准差，这就是找到适合数据分布的过程。\n参考：   《StatQuest》\n  《统计会犯错：如何避免数据分析中的统计陷阱》\n  逻辑回归(Logistic Regression)：计算概率|机器学习速成课程\n  ",
    "ref": "/blog/2021-4-11_%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"
  },{
    "title": "p值",
    "date": "",
    "description": "什么是p值，记录一下。last update：2021-04-10",
    "body": "介绍  p值的含义    假设存在药物A和药物B，想知道两种药物的区别？\n维基百科定义：p值是假设检验中假设零假设为真时观测到至少与实际观测样本相同极端的样本的概率（似乎很拗口）。\np值是介于0-1之间的数字，量化我们相信两种药物不同的信心，p值越接近0，越相信两者不同。当p的阈值为0.05意味着，假设两种药物之间没有差异，执行多次且相同的实验，那么只有5%的实验会得出错误决定，简单来说，p值是对意外的测量。\np值能够帮助确定两种药物是否不同，但是不能告诉我们有什么不同，不管差异是都大还是小，都可以使用较小的p值，即较小的p值不代表差异是大还是小，只是代表意外的结果概率更小 。\n 阈值0.05的由来  不出于逻辑或统计原因，只是科学惯例。\n 术语：假阳性  指的是没有差异时却获得小的p值的情况。\n 术语：假设检验（Hypothesis testing）  试图确定这些药物是否相同的想法。\n 术语：零假设（Null Hypothesis）  零假设是药物相同，p值帮助我们决定是否拒绝零假设。\n统计显著性检验分支 分为以下两个主要的：\n  R.A.Fisher\n  Neyman and Pearson\n  控制假设检验的两类错误很重要：\n 第一类错误  无效说成有效（取伪）。\n第二类错误。  有效判成无效（弃真）。\n这两种错误不能同时消除，但是可以给出一种规范的决策过程来确保第一类错误的可能性只在预先确定的比率下发生（奈曼和皮尔逊），这个比率为显著性水平α（false positive rate），可以根据经验和期望基础设置合适的α，举例：\n建立10%的第一类错误率，设置α = 0.1，当希望决策更加保守，可以将α设置成0.01或更小。确定α后，可以考察哪个 检验过程 的第二类错误的比率更低。\n该体系下，定义一个原假设，即“无效”的假设，再定义一个备择假设，“效应大于0”，构建一个检验去比较这两个假设，假设使用p值，如果p\u0026lt;α，拒绝原假设（费希尔的检验过程把注意力放在揭示任何一个特定的试验证据的强度），p值的大小只用来是否“拒绝原假设”。\n误区 误区1：一次试验的第一类错误率为3.2%\n注意，仅仅通过一次试验不能得到第一类错误率，这是由检验过程决定的，不是一次试验的结果得到的，一个检验过程得到的是一个长期的第一类错误率，不能对应到每一次试验得到的真实p值和对应的第一类错误率。\n误区2：p值越小，差异越大\np值仅仅反应我们相信我们存在差异的信心，p值越小，越有信心拒绝零假设，不管差异是大还是小。\n误区3：P值就是假阳性率\n拒绝原假设犯错属于一类错误，错误的概率就是我们的α，p值只是我们根据一次抽样结果计算出来的值。P \u0026lt; α）表达的是在一次抽样中出现当前结果及更极端结果的可能性比我们认为的在一次抽样中不可能发生的小概率事件的概率更小。\n置信区间 一个置信区间包含一个点估计，和该估计的不确定性。举例：\n如果想检验这个效应量是否显著区别于0，可以构建一个95%的置信区间来检验这个区间是否包含0。\n参考：   《StatQuest》\n  《统计会犯错：如何避免数据分析中的统计陷阱》\n  统计知识|谈谈P值和α水平\n  ",
    "ref": "/blog/2021-4-07_p%E5%80%BC/"
  },{
    "title": "使用CIBERSORTx网页版分析免疫浸润",
    "date": "",
    "description": "申请cibersort.R总是没搞清楚，决定还是先使用网页版进行免疫浸润分析，记录一下。last update：2021-04-06",
    "body": "前言 最近需要对TCGA和PCAWG的表达数据进行免疫浸润水平分析，使用了R包immunedeconv,其中TCGA已经有文献的supplement给出了不同免疫浸润工具进行分析的结果，PCAWG需要自己手动分析，其中CIBERSORT在immunedeconv包中运行需要两个文件：LM22.txt，CIBERSORT.R，需要在官网：https://cibersortx.stanford.edu/ 进行申请。\n上传数据  mixture file  官网上会列出上传数据的要求，我上传了PCAWG的基因表达counts矩阵，数据的第一列是genesymbol的名称，而且第一列的列名需要加上：“GeneSymbol”，数据的第一行是样本的名称。\n注意上传数据的时候，需要勾选自己上传的数据属于哪种类型，否则在分析数据中无法选择到自己上传的数据。\n进行分析 选择cell fraction的custom，得到免疫浸润细胞比例结果，选择custom分析自己的数据。\n勾选LM22作为参考matrix，选择自己上传的matrix作为mixture matrix，需要比较样本间时记住勾选abs。\n运行过程中，可以看到报错信息和输出信息。\n",
    "ref": "/blog/2021-4-06-cibersort/"
  },{
    "title": "使用Latex写论文",
    "date": "",
    "description": "使用Latex写论文可以减少排版的时间，它对文献的引用以及排序非常友好。last update：2021-03-06",
    "body": "前言 最近写文章的时候，发现修改时调整参考文献的引用，是一件非常麻烦的事情，于是找到了一种简便的方法进行调整，发现了用Latex写论文原来这么好用（据涛哥和翔哥说，word也可以自动调整引用文献顺序，而我一直不知道\u0026hellip;）。\n主要内容  LaTex基本语法 模板的使用 文献的引用 排版的调整 特殊符号的引用 图片表格的插入  使用的工具  Oneleaf —— Online LaTeX Editor（推荐）  优点：不用本地搭建环境；在线编辑并渲染；部分投稿期刊直接提供链接模板。\n MacTeX—— For mac  mac的我还没有安过，仅列出来供参考。\n TexWorks —— For windows（我觉得很好用）。  除了上面列出来的，还有很多其他的，根据自己的喜好使用吧。\n基本语法  整体框架  注意到一个部分有开始也有结束，中间就是这个部分的内容。\n\\documentclass{article} \\begin{document} First document. This is a simple example, with no extra parameters or packages included. \\end{document}  preamble  在LaTex中，所有在document内容之前的都称为preamble,在preamble中可以定义整个文档的格式、使用的语言、你需要使用到的宏包、以及其他的元素。举例：\n\\documentclass[12pt, letterpaper]{article} %设置 \\usepackage[utf8]{inputenc} %加载了名叫inputenc的宏包，设置使用utf-8来编码。 在[]方括号中都是一些参数的选择，documentclass中设置了字体大小为12pt（默认的字体大小是10pt），纸张大小为信纸，其他的设置可以看Oneleaf的文档说明。\n这些内容也属于preamble：\n标题\n\\title{First document} 作者\n\\author{cat} 日期\n\\date{March 2021} 谢言\n\\thanks{funded by the Overleaf team}  document内容  字体的简单格式可以通过以下代码实现：\nSome of the \\textbf{greatest} %字体加粗 discoveries in \\underline{science} %加入下划线 were made by \\textbf{\\textit{accident}}. %斜体   还有更多的字体变换可以更改，具体参考字体格式，来个简单的应用示例感受一下它的实用性。\nOneleaf 示例 1. 模板的使用 进入 Oneleaf模板，选择合适的模板 这其中包括国科大的毕业论文模板、开题报告模板，以及各种杂志期刊、简历、信件、海报、报告、作业和写书的模板等等（部分期刊杂志会提供Oneleaf的模板）。\n 以论文写作为例 随便打开一个模板，最右边是实时的渲染结果，中间是可以编辑的部分，左边是模板的目录下文件。\n  左边的目录下存储了4个文件：\n 以.bib结尾的文件  通常用来存储引用文献的信息，其中引用文献需要用特定的格式——BibTex存储，可以通过谷歌学术、百度学术或者其它方式进行导出（谷歌学术的导出功能经常会崩溃），如何使用Bibtex格式进行文献引用请跳转 点击跳转。\n 以.bst结尾的文件  这个文件通常由期刊或杂志提供，设置了参考文献出现的文章结尾的方式，比如：设置排序方式，设置作者名称是缩写还是全称，标题的大小写等等，一般不需要自行维护，而且可以根据自己的需求来在.tex中重新调整。\n 以.tex结尾的文件  这个是进行文档内容编辑的文件，可以在这个文件中加载宏包，进行内容以及格式的更改。\n 以.cls结尾的文件  这个文件通常是类文件，通过文档最前面的\\documentclass导入，这里的\\documentclass[options]{class}是用来指定文档类型的，可以通过options参数来定制文档类的属性，不同的选项之间需要用逗号隔开，比如这里的\\documentclass[final,3p]{CSP}，其中final指的不在页面的边缘标记一个黑色框，这个3p对它的解释是：\n formats the article to the look and feel of the final format of model 3+ journals.\n 我没明白这个3+model是什么意思，但是通过调试，发现这个数字越大，页面距就越大。\n另外别的模板中还存在这些文件：\n .bbl文件  这是编译之后形成的文件，这里直接就显示了编译后的形式，可以直接下载PDF文件。\n .sty文件  这是包文件，通常使用\\usepackage导入。\n2. 内容的编辑以及参考文献的引用 内容的编辑 载入宏包的方法是在文档开始前\\begin{document}，写入\\usepackage{package}\n这里介绍几个常用的宏包：\n  数学公式 - amsmath\n  插图 - graphicx\n  颜色 - xcolor\n  表格 - array\n  中文 - ctex, xecjk\n  西文 otf 字体 - fontspec\n  英文下划线 - geometry\n  特别的，当要使用英文下划线-时，比如写入sigminer包中的函数名read_maf时，并不能直接识别下划线，需要载入该包来处理，或者给每处下划线改成\\_也可以不用载入包来识别。\n 超链接 - hyperref  语法：\\usepackage[options]{hyperref}\n示例：加入超链接，同时将文献也超链接到reference中，并且设置超链接的颜色，常用的设为蓝色或者黑色。\n\\usepackage[backref, colorlinks,linkcolor=blue]{hyperref}   \n文献的引用  保存引用文献信息(google)  如下图所示，谷歌学术中可以直接得到BibTex这种引用格式，将文献信息存储在.txt中，然后更改后缀为.bib即可。\n  点击 BibTex 后会弹出下图所示页面，复制内容至.bib文件内即可。\n   在tex文件中对引用格式进行设置  在文档结束位置\\end{document}前，增加对参考文献格式以及引用的设置，比如：\n\\bibliographystyle{bibft}\\it \\bibliography{bibfile} bibft是模板自带并自己命名的格式文件，这是由.cls文件定义的，bibfile就是制作好的bibtex文件，\n注意这里的文献引用格式有很多种，除了模板中定义的格式，可以通过参数的调整将格式更改为自己想要的，比如常用的，在方括号中标注数字，并且根据文献引用的先后顺序对reference排序：\n\\begin{document} \\bibliographystyle{unsrt} \\bibliographystyle{unsrt} %根据引用顺序自动排序 \\bibliography{bibfile.bib} %引用文献的文件 \\end{document} 我认为最方便的地方就是这里，能够根据文献引用的顺序对reference进行自动排序。\n 保存引用文献信息(zotero)  在zotero中设置导出为BibTex，在zotero中通过command+shift+c就可以直接复制出该文献的BibTex引用格式。\n   在tex文件中进行引用  通常在正文中有很常见的几种文献引用格式： 温哥华格式（上标形式） 哈佛格式（直接显示作者和发表年份） IEEE 格式（方括号内标注引用顺序）\n在文中一般使用\\cite{}进行引用，括号中的内容就是BibTex中的第一个参数，这个是可以自定义的，通常都是作者的姓或者名+发表年份+论文题目的首个单词。\n@inproceedings{song2013hierarchical, title={Hierarchical representation using NMF}, author={Song, Hyun Ah and Lee, Soo-Young}, booktitle={International conference on neural information processing}, pages={466--473}, year={2013}, organization={Springer} } 另外还有宏包natbib，通过不同形式的cite比如：\n\\citet：\n\\citet{jon90} ## Jones et al. (1990) \\citep：\n\\citep{jon90}\t## (Jones et al., 1990) \\citeyear：\n\\citeyearpar{jon90} ## (1990) \u0026hellip;\u0026hellip;\n该宏包的使用方式如下。\n\\usepackage[option]{natbib} \\bibliographystyle{natbib} \\bibliography{bibfile} 3. 表格的制作 分为以下两个部分：\n 手动输入表格（适合小型表格） 其他工具进行表格转换   Excel中的表格  可以在Excel中使用插件：Excel2Latex，该插件能够将Excel表格转化为LaTex的表格形式。\nWord中的表格  可以使用pandoc直接转换为.tex格式，不过转换之后不是完美的，可能需要手动调整一下。\n示例：\npandoc test.docx -o test.tex 其他文件形式的表格  比如在R当中得到的表格，可以使用stargazer包把结果输出为LaTex格式，或者xtable包。\n以xtable包为例：\n\u0026gt; install.packages(\u0026#34;xtable\u0026#34;) #安装xtable \u0026gt; library(xtable) #载入 \u0026gt; data(iris) # 示例数据 \u0026gt; xtable(head(iris),digits=3,caption=\u0026#34;Head of Iris Data\u0026#34;) #将iris数据前6行 # 保留三位小数 #标题设为\u0026#34;Head of Iris Data\u0026#34;，导出为LaTex格式 % latex table generated in R 4.0.2 by xtable 1.8-4 package % Sat Mar 6 20:04:47 2021 \\begin{table}[ht] \\centering \\begin{tabular}{rrrrrl} \\hline \u0026amp; Sepal.Length \u0026amp; Sepal.Width \u0026amp; Petal.Length \u0026amp; Petal.Width \u0026amp; Species \\\\ \\hline 1 \u0026amp; 5.100 \u0026amp; 3.500 \u0026amp; 1.400 \u0026amp; 0.200 \u0026amp; setosa \\\\ 2 \u0026amp; 4.900 \u0026amp; 3.000 \u0026amp; 1.400 \u0026amp; 0.200 \u0026amp; setosa \\\\ 3 \u0026amp; 4.700 \u0026amp; 3.200 \u0026amp; 1.300 \u0026amp; 0.200 \u0026amp; setosa \\\\ 4 \u0026amp; 4.600 \u0026amp; 3.100 \u0026amp; 1.500 \u0026amp; 0.200 \u0026amp; setosa \\\\ 5 \u0026amp; 5.000 \u0026amp; 3.600 \u0026amp; 1.400 \u0026amp; 0.200 \u0026amp; setosa \\\\ 6 \u0026amp; 5.400 \u0026amp; 3.900 \u0026amp; 1.700 \u0026amp; 0.400 \u0026amp; setosa \\\\ \\hline \\end{tabular} \\caption{Head of Iris Data} \\end{table} 表格的介绍 表格的基本格式和要素如下（2行2列表格）：\n\\documentclass{article} \\usepackage{float}%提供float浮动环境 \\usepackage{makecell} %%用来基线 \\begin{table}[h] \\centering %%表居中 \\caption{table} %%表格标题 \\begin{tabular}{|c|c|} %%{cc} 表示各列元素对齐方式，left-l,right-r,center-c，两个c表示两列，｜表示增加垂直方向基线 \\hline %%\\hline 在此行下面画一横线 a \u0026amp; b \\\\\\hline c \u0026amp; d\\\\ \\hline \\end{tabular} \\end{table} \\end{document}   当表格太大或者太小的时候，有非常多的解决办法，可以通过调整字体的长或宽，也可以直接整体调整表格的大小，本质都是通过在tabular类外，套上调整表格的参数设置。\n通过调整字体的宽度（mm是百分比，60mm就是60%）：\n\\resizebox{\\textwidth}{60mm}{} 通过调整表格的大小：\n\\usepackage{graphicx} \\begin{table} \\caption{表格标题} \\scalebox{0.9}{ %缩小至原来的90% \\begin{tabular} …… \\end{tabular}} \\end{table} 文献中常用的三线表可以通过以下Latex实现：\n\\documentclass{article} \\usepackage{float}%提供float浮动环境 \\usepackage{booktabs} %%提供命令\\toprule、\\midrule、\\bottomrule \\usepackage{makecell} %%用来基线 \\usepackage{geometry} \\usepackage{amsmath} %\\geometry{papersize={40cm,80cm}} \\geometry{left=1cm,right=1cm,top=3cm,bottom=1cm} \\begin{document} %经典三线表 \\begin{table}[H] %%H为当前位置 \\caption{\\textbf{test title}}%标题 \\centering%把表居中 \\begin{tabular}{ccc}%四个c代表该表一共四列，内容全部居中 \\toprule[1.5pt]%第一道横线 year \u0026amp; month \u0026amp; day \\\\ \\midrule%第二道横线 2021 \u0026amp; 3 \u0026amp; 5 \\\\ \\bottomrule[1.5pt]%第三道横线 \\end{tabular} \\end{table} \\end{document}   4. 图片的引入 LaTeX插入图片时，支持格式有各种：png, pdf, jpg, eps等等。\n 准备图片  将图片全部保存在目录下的同一个文件夹下，方便查找，注意图片的命名尽量避免中文，特殊字符等等(这里就只用了一个文件，我就直接放在目录下了)。\n 图片基本语法  必须加载graphicx等包来支持图片的导入。\n\\documentclass{article} \\usepackage{graphicx} \\graphicspath{ {images/} } \\begin{document} The universe is immense and it seems to be homogeneous, in a large scale, everywhere we look at. \\includegraphics{universe} There's a picture of a galaxy above \\end{document}  给图片进行排版（排版有很多种，现在展示的是两个图片并排）    \\usepackage{graphicx} %%插入图片的宏包 \\usepackage{float} %%设置图片浮动位置的宏包 \\usepackage{subfigure} %%插入多图时用子图显示的宏包 \\begin{figure} %%旋转子系统姿态角 \\centering \\subfigure{ \\label{fig:subfig:a} %% label for first subfigure \\includegraphics[width=4cm,height=4cm]{taoziyu.jpg}} \\hspace{1in} \\subfigure{ \\label{fig:subfig:b} % label for second subfigure \\includegraphics[width=4cm,height=4cm]{taoziyu.jpg}} \\caption{The same cute cat (a) cute cat1. (b) cute cat2.} %% caption用于图表的标题 \\label{fig:attitude} %% label for entire figure \\end{figure} 参考资料  Oneleaf官方文档 BibTex的使用方法 latex documentclass 及相关布局 document class LaTex - 从出门到掉到坑 LaTex插入图形，表格 LaTeX排版札记 用R语言快速生成Latex表格 LaTeX高效写作系列：word表格转LaTeX  题外之言 该markdown文档中新使用了以下几个有趣的功能：\n 自定义锚实现页内跳转  在跳转目的地附近加上\u0026lt;span id=\u0026quot;jump\u0026quot;\u0026gt;目的地\u0026lt;/span\u0026gt;，在需要点击跳转的地方加上[点击跳转](#jump)\n 更改超链接颜色，更改字体颜色 多图片并列 ",
    "ref": "/blog/2021-3-05-latex_blog/"
  },{
    "title": "About",
    "date": "",
    "description": "Hugo, the world’s fastest framework for building websites",
    "body": "test page\n",
    "ref": "/about/"
  },{
    "title": "等待天使的妹妹",
    "date": "",
    "description": "2020年疫情期间漫长的寒假，这本书是那个时候在家读的。",
    "body": "前言",
    "ref": "/book/2021-1-16/"
  },{
    "title": "Hugo+Github+阿里云域名搭建个人博客（附Netlify部署方法）",
    "date": "",
    "description": "这是我第一次搭建个人博客，记录一下搭建过程。last update：2021-01-21",
    "body": "前言 最近师兄和涛哥都分享了这个流程：如何使用了R包blogdown搭建个人博客，但是我和轩哥在使用的过程中发现一个小问题，有一些主题似乎并不能很好的被blogdown安装的hugo来应用，几番求解无果，暂时将这个问题搁置，因为太喜欢这个theme不想放弃，所以找了一种不用blogdown的方法去搭建，终于取得成果。\n搭建流程  下载Hugo  Mac直接使用brew安装即可\n其他的系统可以直接参考官方文档：hugo官方文档\nbrew install hugo 部分主题依赖extended version（比如我使用的这个主题），所以检查一下Hugo版本\nhugo version Hugo Static Site Generator v0.80.0/extended darwin/amd64 BuildDate: unknown  使用Hugo建博客  #新的博客的名字就叫blog hugo new site blog ls archetypes\tcontent\tlayouts\tresources\tthemes config.toml\tdata\tstatic  设置博客主题  从Hugo的官网找到自己喜欢的主题：Hugo themes\n我使用了这个主题：hugo-future-imperfect-slim\n下面开始设置博客主题\ncd blog/themes #blog就是刚才新创建的博客目录，themes是它的子目录 git clone https://github.com/pacollins/hugo-future-imperfect-slim.git #点击主题页的download，进入GitHub主页，找到code⬇当中的网址进行clone #注意主题要下在theme目录下 cp themes/hugo-future-imperfect-slim/exampleSite/config.toml . #使用模板自带的配置文件替换blog目录下的配置文件 有的模板没有exampleSite目录，或者是config.toml文件名为其他的名字，不管怎样，用模板目录下的config文件替换blog目录下的config文件即可。\n像轩哥用的主题 hyde，根据其在github上的安装提示，对blog目录下的config文件首行增加theme = \u0026quot;hyde\u0026quot; 即可，无需拷贝模板的config文件。\n以及主题 npq-hugo，它的模板config文件不在exampleSite目录下，而是themes/npq-hugo/example-config.toml。\n 回到blog目录下创建新博文  cd .. hugo new posts/test.md #会在content/post文件夹下创建test.md的文件，可以直接对其进行修改 开始可能不会修改，可以根据主题目录中的范例进行模仿，我选择主题的范例文件储存在：\nblog/themes/hugo-future-imperfect-slim/exampleSite/content/blog\n 进行预览  hugo server -D Start building sites … | EN | FR | PL | PT | DE | ES | ZH-CN | ZH-TW | JA | NL -------------------+----+----+----+----+----+----+-------+-------+----+----- Pages | 11 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 Paginator pages | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Non-page files | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Static files | 27 | 27 | 27 | 27 | 27 | 27 | 27 | 27 | 27 | 27 Processed images | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Aliases | 3 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 Sitemaps | 2 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 Cleaned | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Built in 108 ms Watching for changes in /Volumes/home /github/taozy_blog/{archetypes,content,data,layouts,static,themes} Watching for config changes in /Volumes/home /github/taozy_blog/config.toml Environment: \u0026quot;development\u0026quot; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 在浏览器中打开terminal中显示的网址进行预览： http://localhost:1313/\n你可以使用可以编辑md的工具进行内容修改，我习惯用Rstudio打开它进行更改，而且很棒的是，在编辑的过程中，预览网址上的内容也会实时的变更，很方便进行修改。\n 配置Github repository  我配置了两个repos，一个用于托管我blog目录下所有的文件，一个用来托管public文件夹用于博客的显示。\n 第一个repos随意命名  上传blog目录下的文件\n第二个repos必须命名为：your_git_name.github.io，才能够被当作个人的主页  上传public目录下的文件（注意不是public这个文件夹，而是该文件夹下的所有文件），目前还没有生成public文件，不要着急，继续下面的操作。\n在blog目录下执行下面的命令，把theme改成你自己的theme名称，baseUrl换成你自己的github名，执行完会在blog目录下生成一个public目录，将这个目录下的内容上传到your_git_name.github.io仓库中\nhugo --theme=hugo-future-imperfect-slim --baseUrl=\u0026#34;https://taoziyu97.github.io\u0026#34; Start building sites … | EN | FR | PL | PT | DE | ES | ZH-CN | ZH-TW | JA | NL -------------------+----+----+----+----+----+----+-------+-------+----+----- Pages | 11 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 | 8 Paginator pages | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Non-page files | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Static files | 21 | 21 | 21 | 21 | 21 | 21 | 21 | 21 | 21 | 21 Processed images | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Aliases | 3 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 Sitemaps | 2 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 Cleaned | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 Total in 209 ms  总结一下hugo-future-imperfect-slim这个主题的缺点\n 对于内容没有很好的汇总界面 只能一页一页的翻页，不能指定去哪一页 搜索内容的时候不支持中文    设置仓库的GitHub Pages  在仓库主页找到Setting，在Options中对Github Pages进行设置，如果你没有购买域名，那么你就可以在这步直接使用github提供的网址，作为你的博客网页，如果你有自己的域名（比如我从阿里云买了.cn的域名，我就将Custom domain设置为自己的域名）\n 解析域名方法1  打开域名解析，进行解析设置，添加两条记录，主机记录分别为@和www，记录类型为CNAME，记录值都指向github的网址，your_git_name.github.io\n现在打开个人主页试一试效果吧！\n 解析域名方法2（推荐，相对方法1速度更快一些）  Netlify 是一个提供静态资源网络托管的综合平台。参考这个链接内容部署：Netlify部署静态网页\n将Netlify随机生成的域名，在阿里云中进行解析设置。\n  Netlify中解析成功。\n  可以打开啦，访问速度比方法1快一些，另外，我的图是通过图床阅览的，方法2中拜托了github.io域名的限制，相当于把github当作一个储存的空间。\n",
    "ref": "/blog/2021-1-11-build_blog/"
  },{
    "title": "archives",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/archives/"
  },{
    "title": "Contact",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
